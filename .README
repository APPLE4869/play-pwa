## やること
1. PWAとは？
2. PWAによるメリット
3. PWAにするやり方は？
4. PWAを実際に見てみる
5. PWAを実際に作ってみる。


### 1. PWAとは？
Progressive Web Appsの略。
普通のアプリがStore経由でインストールするのに対して、Web経由で簡単にインストールできるアプリ。
開発者的にもStoreの審査などの手間を全て省くことができる。


### 2. PWAによるメリット
- ページの読み込みや表示が速い
- オフラインでも動く
- 画面遷移をともなう操作もオフライン時に可能
- プッシュ通知の受信が可能(Android Only)
- インストール不要(Store不要)
- ストアの審査なくアップデートが可能
- GPSを使った現在地取得やApplePayなどネイティブの機能の利用が可能
- ネイティブアプリのようなUIを実現できる
  - ブラウザデフォルトのUI（上部のメニューバー）を非表示にするなどのカスタマイズが可能
  - 「ホームに追加」ボタンを表示でき、ホームに追加されたページはインストールされたアプリのように扱える(Android Only)
  - ホーム画面のアイコンが設定できる
  - 起動時のスプラッシュ画面が設定できる(Android Only)

などなど、今後もAPIはさらに増え続けて、PWAとしてやれることはより増加して行くと予想されている。
現状だと、Safariが他のブラウザに比べて、やや遅れているので、
スプラッシュ画像などを設定できなかったりする。


### 3. 導入事例
以下はあくまでホーム画面に登録されたフルスクリーンのサイトとブラウザ上のサイトで比較した際の数値と考えられる。

#### twitter
・訪問別ページビューが65％増加
・ツイート（つぶやき）が75％増加
・離脱率20％減
（出典：https://developers.google.com/web/showcase/2017/twitter）


#### OLX(インドのオンラインマーケットプレイス)
・離脱率80%減
・広告クリック率146%増加
・エンゲージメント率250%増加
(出典：https://developers.google.com/web/showcase/2017/olx)


### 3. PWAにするには？
Googleの定めるPWAに沿ったWebページにすることで、サイトをPWAにして行くことができる。
0か1かというよりは、あらゆる項目を達成していくことで、サイトが少しずつPWAに寄っていくというイメージ。

Progressive Web App Checklist by Google
https://developers.google.com/web/progressive-web-apps/checklist

#### PWA初級編(PWAのベースガイドライン)
- プロトコルがHTTPSであること。
- サイトデザインがレスポンシブ対応であること。
- 全てのページがオフラインで閲覧可能であること。
- ホーム画面用のメタ情報が登録されていること。
- 初期表示時、3G回線であっても10秒以内にページ描画が完了すること。
- あらゆるブラウザ(Chrome, Edge, Firefox, Safari)で利用できること。
- ネットワーク状況に関わらず瞬時にページ遷移できること。
- 各ページがそれぞれ固有のURLを有すること。

#### PWA上級編(模範的なPWA)
- サイトがGoogleにインデックスされていること。
- Schema.org(マイクロデータ or JsonLd...)が適切に設定されていること。
- Socialメタデータが適切に設定されていること。
- 必要なページにcanonicalが設定されていること。
- 戻るボタンが用意されていること。
他17項目...


### 4. PWAを実際に見てみる



### 5. PWAを実際に作ってみる。


